// Generated by rstantools.  Do not edit by hand.

/*
    DemoTools is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    DemoTools is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with DemoTools.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_rc_11_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_rc_11");
    reader.add_event(46, 44, "end", "model_rc_11");
    return reader;
}
#include <stan_meta_header.hpp>
class model_rc_11
  : public stan::model::model_base_crtp<model_rc_11> {
private:
        int N;
        vector_d x;
        vector_d y;
public:
    model_rc_11(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_rc_11(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_rc_11_namespace::model_rc_11";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 3;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "vector_d", context__.to_vec(N));
            x = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                x(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 4;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 7;
            num_params_r__ += 1;
            current_statement_begin__ = 8;
            num_params_r__ += 1;
            current_statement_begin__ = 9;
            num_params_r__ += 1;
            current_statement_begin__ = 10;
            num_params_r__ += 1;
            current_statement_begin__ = 11;
            num_params_r__ += 1;
            current_statement_begin__ = 12;
            num_params_r__ += 1;
            current_statement_begin__ = 13;
            num_params_r__ += 1;
            current_statement_begin__ = 14;
            num_params_r__ += 1;
            current_statement_begin__ = 15;
            num_params_r__ += 1;
            current_statement_begin__ = 16;
            num_params_r__ += 1;
            current_statement_begin__ = 17;
            num_params_r__ += 1;
            current_statement_begin__ = 18;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_rc_11() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 7;
        if (!(context__.contains_r("alpha1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha1", "double", context__.to_vec());
        double alpha1(0);
        alpha1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, alpha1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 8;
        if (!(context__.contains_r("alpha2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha2", "double", context__.to_vec());
        double alpha2(0);
        alpha2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, alpha2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 9;
        if (!(context__.contains_r("alpha3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha3");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha3", "double", context__.to_vec());
        double alpha3(0);
        alpha3 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, alpha3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 10;
        if (!(context__.contains_r("a1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "a1", "double", context__.to_vec());
        double a1(0);
        a1 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, a1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 11;
        if (!(context__.contains_r("a2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "a2", "double", context__.to_vec());
        double a2(0);
        a2 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, a2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 12;
        if (!(context__.contains_r("a3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a3");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "a3", "double", context__.to_vec());
        double a3(0);
        a3 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, a3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 13;
        if (!(context__.contains_r("c")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable c missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("c");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "c", "double", context__.to_vec());
        double c(0);
        c = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, c);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable c: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 14;
        if (!(context__.contains_r("mu2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu2", "double", context__.to_vec());
        double mu2(0);
        mu2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, mu2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("mu3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu3");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu3", "double", context__.to_vec());
        double mu3(0);
        mu3 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain((mu2 + 1), max(x), mu3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("lambda2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda2", "double", context__.to_vec());
        double lambda2(0);
        lambda2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lambda2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 17;
        if (!(context__.contains_r("lambda3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda3");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda3", "double", context__.to_vec());
        double lambda3(0);
        lambda3 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, lambda3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda3: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 18;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 7;
            local_scalar_t__ alpha1;
            (void) alpha1;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha1 = in__.scalar_lb_constrain(0, lp__);
            else
                alpha1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 8;
            local_scalar_t__ alpha2;
            (void) alpha2;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha2 = in__.scalar_lb_constrain(0, lp__);
            else
                alpha2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 9;
            local_scalar_t__ alpha3;
            (void) alpha3;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha3 = in__.scalar_lb_constrain(0, lp__);
            else
                alpha3 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 10;
            local_scalar_t__ a1;
            (void) a1;  // dummy to suppress unused var warning
            if (jacobian__)
                a1 = in__.scalar_lub_constrain(0, 1, lp__);
            else
                a1 = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 11;
            local_scalar_t__ a2;
            (void) a2;  // dummy to suppress unused var warning
            if (jacobian__)
                a2 = in__.scalar_lub_constrain(0, 1, lp__);
            else
                a2 = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 12;
            local_scalar_t__ a3;
            (void) a3;  // dummy to suppress unused var warning
            if (jacobian__)
                a3 = in__.scalar_lub_constrain(0, 1, lp__);
            else
                a3 = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 13;
            local_scalar_t__ c;
            (void) c;  // dummy to suppress unused var warning
            if (jacobian__)
                c = in__.scalar_lub_constrain(0, 1, lp__);
            else
                c = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 14;
            local_scalar_t__ mu2;
            (void) mu2;  // dummy to suppress unused var warning
            if (jacobian__)
                mu2 = in__.scalar_lb_constrain(0, lp__);
            else
                mu2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 15;
            local_scalar_t__ mu3;
            (void) mu3;  // dummy to suppress unused var warning
            if (jacobian__)
                mu3 = in__.scalar_lub_constrain((mu2 + 1), max(x), lp__);
            else
                mu3 = in__.scalar_lub_constrain((mu2 + 1), max(x));
            current_statement_begin__ = 16;
            local_scalar_t__ lambda2;
            (void) lambda2;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda2 = in__.scalar_lb_constrain(0, lp__);
            else
                lambda2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 17;
            local_scalar_t__ lambda3;
            (void) lambda3;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda3 = in__.scalar_lb_constrain(0, lp__);
            else
                lambda3 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 18;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 22;
            validate_non_negative_index("mu_rc", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu_rc(N);
            stan::math::initialize(mu_rc, DUMMY_VAR__);
            stan::math::fill(mu_rc, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 24;
            stan::math::assign(mu_rc, add(add(add(multiply(a1, stan::math::exp(multiply(-(alpha1), x))), multiply(a2, stan::math::exp(subtract(multiply(-(alpha2), subtract(x, mu2)), stan::math::exp(multiply(-(lambda2), subtract(x, mu2))))))), multiply(a3, stan::math::exp(subtract(multiply(-(alpha3), subtract(x, mu3)), stan::math::exp(multiply(-(lambda3), subtract(x, mu3))))))), c));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 22;
            size_t mu_rc_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(mu_rc(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: mu_rc" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu_rc: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 29;
            lp_accum__.add(normal_log<propto__>(y, mu_rc, sigma));
            current_statement_begin__ = 32;
            lp_accum__.add(normal_log<propto__>(alpha1, 0, 1));
            current_statement_begin__ = 33;
            lp_accum__.add(normal_log<propto__>(alpha2, 0, 1));
            current_statement_begin__ = 34;
            lp_accum__.add(normal_log<propto__>(alpha3, 0, 1));
            current_statement_begin__ = 35;
            lp_accum__.add(normal_log<propto__>(a1, 0, 1));
            current_statement_begin__ = 36;
            lp_accum__.add(normal_log<propto__>(a2, 0, 1));
            current_statement_begin__ = 37;
            lp_accum__.add(normal_log<propto__>(a3, 0, 1));
            current_statement_begin__ = 38;
            lp_accum__.add(normal_log<propto__>(c, 0, 1));
            current_statement_begin__ = 39;
            lp_accum__.add(normal_log<propto__>(mu2, 25, 1));
            current_statement_begin__ = 40;
            lp_accum__.add(normal_log<propto__>(mu3, 65, 1));
            current_statement_begin__ = 41;
            lp_accum__.add(normal_log<propto__>(lambda2, 0, 1));
            current_statement_begin__ = 42;
            lp_accum__.add(normal_log<propto__>(lambda3, 0, 1));
            current_statement_begin__ = 43;
            lp_accum__.add(normal_log<propto__>(sigma, 0, 1));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha1");
        names__.push_back("alpha2");
        names__.push_back("alpha3");
        names__.push_back("a1");
        names__.push_back("a2");
        names__.push_back("a3");
        names__.push_back("c");
        names__.push_back("mu2");
        names__.push_back("mu3");
        names__.push_back("lambda2");
        names__.push_back("lambda3");
        names__.push_back("sigma");
        names__.push_back("mu_rc");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_rc_11_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double alpha1 = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha1);
        double alpha2 = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha2);
        double alpha3 = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha3);
        double a1 = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(a1);
        double a2 = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(a2);
        double a3 = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(a3);
        double c = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(c);
        double mu2 = in__.scalar_lb_constrain(0);
        vars__.push_back(mu2);
        double mu3 = in__.scalar_lub_constrain((mu2 + 1), max(x));
        vars__.push_back(mu3);
        double lambda2 = in__.scalar_lb_constrain(0);
        vars__.push_back(lambda2);
        double lambda3 = in__.scalar_lb_constrain(0);
        vars__.push_back(lambda3);
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 22;
            validate_non_negative_index("mu_rc", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> mu_rc(N);
            stan::math::initialize(mu_rc, DUMMY_VAR__);
            stan::math::fill(mu_rc, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 24;
            stan::math::assign(mu_rc, add(add(add(multiply(a1, stan::math::exp(multiply(-(alpha1), x))), multiply(a2, stan::math::exp(subtract(multiply(-(alpha2), subtract(x, mu2)), stan::math::exp(multiply(-(lambda2), subtract(x, mu2))))))), multiply(a3, stan::math::exp(subtract(multiply(-(alpha3), subtract(x, mu3)), stan::math::exp(multiply(-(lambda3), subtract(x, mu3))))))), c));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t mu_rc_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < mu_rc_j_1_max__; ++j_1__) {
                    vars__.push_back(mu_rc(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_rc_11";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_rc_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_rc" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "a3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "c";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t mu_rc_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_rc_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "mu_rc" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_rc_11_namespace::model_rc_11 stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
