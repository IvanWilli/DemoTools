% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Beers.R
\name{beers}
\alias{beers}
\title{The ordinary modified Beers splitting methods}
\usage{
beers(popmat, Age = as.integer(rownames(as.matrix(popmat))),
  OAG = TRUE, method = "mod", johnson = FALSE)
}
\arguments{
\item{popmat}{numeric. Matrix of age-period population counts in 5-year age groups with integer-labeled margins (age in rows and year in columns).}

\item{Age}{numeric. A vector of ages corresponding to the lower integer bound of the counts. Detected from row names of \code{popmat} if missing.}

\item{OAG}{logical. Whether or not the final age group open. Default \code{TRUE}.}

\item{method}{character. Valid values are \code{"mod"} or \code{"ord"}. Default \code{"mod"}.}

\item{johnson}{logical. Whether or not to adjust young ages according to the \href{https://www.census.gov/data/software/dapps.html}{Demographic Analysis & Population Projection System Software} method. Default \code{FALSE}.}
}
\value{
An age-period matrix of split population counts with the same number of
columns as \code{popmat}, and single ages in rows.
}
\description{
This method offers both ordinary and modified Beers splitting, with an optional \href{https://www.census.gov/data/software/dapps.html}{Demographic Analysis & Population Projection System Software} adjustment \code{johnson} for ages under 10.
}
\details{
Ages should refer to lower age bounds. The rows of \code{popmat} must be labelled with ages unless \code{Age} is given separately. There must be at least six 5-year age groups (including the open group, 5 otherwise). One year of data will work as well, as long as it is given as or coercible to a single-column matrix. If you want the \code{johnson} adjustment then \code{popmat} must contain a single-year estimate of the population count in age 0. That means popmat must come either as standard abridged or single age data.

If the highest age does not end in a 0 or 5, and \code{OAG == TRUE}, then the open age will be grouped down to the next highest age ending in 0 or 5. If the highest age does not end in a 0 or 5, and \code{OAG == FALSE}, then results extend to single ages covering the entire 5-year age group.
}
\examples{
p5 <- pop5_mat
head(p5) # this is the entire matrix
p1 <- beers(p5, OAG = FALSE)
head(p1)
# note some negatives in high ages
tail(p1)
colSums(p1) - colSums(p5)

# another case, starting with single ages
# note beers() groups ages.
Value        <- pop1m_ind
Age          <- 0:100
names(Value) <- Age
ord1 <-  beers(Value, OAG = TRUE, method = "ord")
mod1 <- beers(Value, OAG = TRUE, method = "mod")
\dontrun{
plot(Age,Value,
ylab = 'The counts', xlab = 'Age groups')
lines(Age, ord1, t='l', col='blue')
lines(Age, mod1, t = 'l', col ='red', lty =2)
legend(80,15000000,
      legend = c('Ordinary',
                 'Modified'),
      col=c('blue', 'red'),
      lty = c(1,2))
}

# notice this negative value. Yuck!
tail(mod1)
# this replaces ages 90+, guaranteed no negatives.
graduate_mono_closeout(Value, pops = mod1, OAG = TRUE)
# Note: there are no kludges built into beers() to handle such cases.
# these ought to be handled by wrappers as appropriate.

# This replicates Johnson_2016_BEERSP.XLS, males
M <- c(184499,752124-184499,582662,463534,369976,286946,235867,
		199561,172133,151194,131502,113439,95614,
		78777,60157,40960,21318,25451)
dim(M)      <- c(length(M),1)
rownames(M) <- c(0,1,seq(5,80,by=5))
Age0        <- 184499
johnson     <- beers(
		         popmat = M,
		         OAG = TRUE,
			     method = "ord",
			     johnson = TRUE)
}
\references{
\insertRef{beers1945modified}{DemoTools}
\insertRef{shryock1973methods}{DemoTools}
\insertRef{siegel2004methods}{DemoTools}
\insertRef{stover2008spectrum}{DemoTools}
}
